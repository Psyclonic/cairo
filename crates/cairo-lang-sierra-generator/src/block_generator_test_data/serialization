//! > Test array serialize (this code triggers many issues with the match optimization).

//! > test_runner_name
block_generator_test

//! > function
fn serialize_array_felt_helper(ref serialized: Array<felt252>, mut input: Array<felt252>) {
    match input.pop_front() {
        Option::Some(value) => {
            value.serialize(ref serialized);
            serialize_array_felt_helper(ref serialized, input);
        },
        Option::None(_) => {},
    }
}

//! > function_name
serialize_array_felt_helper

//! > module_code
use array::ArrayTrait;
use option::OptionTrait;
use serde::Serde;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
array_pop_front<felt252>([0]) { fallthrough([1], [2]) label0([3]) }
branch_align() -> ()
unbox<felt252>([2]) -> ([4])
enum_init<core::option::Option::<core::felt252>, 0>([4]) -> ([5])
PushValues([1]: Array<felt252>, [5]: core::option::Option::<core::felt252>) -> ([6], [7])
jump() { label2() }
label0:
branch_align() -> ()
struct_construct<Unit>() -> ([8])
enum_init<core::option::Option::<core::felt252>, 1>([8]) -> ([9])
PushValues([3]: Array<felt252>, [9]: core::option::Option::<core::felt252>) -> ([6], [7])
label2:
enum_match<core::option::Option::<core::felt252>>([7]) { fallthrough([10]) label3([11]) }
branch_align() -> ()
dup<felt252>([10]) -> ([10], [12])
drop<felt252>([10]) -> ()
PushValues([12]: felt252, [13]: Array<felt252>) -> ([16], [17])
function_call<user@core::serde::Felt252Serde::serialize>([16], [17]) -> ([14], [15])
drop<Unit>([15]) -> ()
PushValues([14]: Array<felt252>, [6]: Array<felt252>) -> ([20], [21])
function_call<user@test::serialize_array_felt_helper>([20], [21]) -> ([18], [19])
drop<Unit>([19]) -> ()
PushValues([18]: Array<felt252>) -> ([22])
jump() { label5() }
label3:
branch_align() -> ()
drop<Unit>([11]) -> ()
drop<Array<felt252>>([6]) -> ()
PushValues([13]: Array<felt252>) -> ([22])
label5:
struct_construct<Unit>() -> ([23])
PushValues([22]: Array<felt252>, [23]: Unit) -> ([24], [25])
return([24], [25])
label4:
label1:

//! > lowering_flat
Parameters: v0: core::array::Array::<core::felt252>, v1: core::array::Array::<core::felt252>
blk0 (root):
Statements:
End:
  Match(match core::array::array_pop_front::<core::felt252>(v1) {
    Option::Some(v13, v14) => blk1,
    Option::None(v15) => blk2,
  })

blk1:
Statements:
  (v22: core::felt252) <- core::box::unbox::<core::felt252>(v14)
  (v17: core::option::Option::<core::felt252>) <- Option::Some(v22)
End:
  Goto(blk3, {v13 -> v18, v17 -> v19})

blk2:
Statements:
  (v20: ()) <- struct_construct()
  (v21: core::option::Option::<core::felt252>) <- Option::None(v20)
End:
  Goto(blk3, {v15 -> v18, v21 -> v19})

blk3:
Statements:
End:
  Match(match_enum(v19) {
    Option::Some(v4) => blk4,
    Option::None(v10) => blk5,
  })

blk4:
Statements:
  (v4: core::felt252, v5: @core::felt252) <- snapshot(v4)
  (v7: core::array::Array::<core::felt252>, v6: ()) <- core::serde::Felt252Serde::serialize(v5, v0)
  (v9: core::array::Array::<core::felt252>, v8: ()) <- test::serialize_array_felt_helper(v7, v18)
End:
  Goto(blk6, {v9 -> v11})

blk5:
Statements:
End:
  Goto(blk6, {v0 -> v11})

blk6:
Statements:
  (v12: ()) <- struct_construct()
End:
  Return(v11, v12)
